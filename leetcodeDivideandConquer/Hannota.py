# date: 2021.11.21
# 《python算法入门到实践》
# 经典递归——汉诺塔问题
# 一共有三个柱子，分别为A,B,C；柱子A有n个盘子，大的盘子在下面，小的盘子在上面；
# 保持大盘子在下，小盘子在上的顺序，将所有盘子移动到柱子C
# 思路，先将n-1个盘子移动到柱子B，再将第n个盘子移动到柱子C，
# 再将n-1个盘子，移动到柱子C
# 思路细节： 移动n-1个盘子到柱子B时，需要借助柱子C进行移动
# 移动n-1个盘子到柱子C时，需要借助柱子A
# move(n-1,a,c,b)
# move(1,a,b,c)
# move(n-1,b,a,c)

def move(n, a, b, c):
    if n == 1:
        print(a, "->", c)  # 返回操作过程
        return
    move(n - 1, a, c, b)
    move(1, a, b, c)
    move(n - 1, b, a, c)
    # 如何返回操作次数？
    # 根据递归关系，操作次数为(2^n-1)
    # 无法在这个函数中返回递归次数？直接自己算？


# test
print(move(3, "a", "b", "c"))
